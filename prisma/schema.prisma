// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  upodatedAt DateTime @updatedAt

  name     String
  surname  String
  email    String  @unique
  password String
  isActive Boolean @default(true)
  Post     Post[]
}

model Post {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  upodatedAt DateTime @updatedAt

  title   String
  content String

  author   User   @relation(fields: [authorId], references: [id])
  authorId String
}

// Aviability Page
model Aviability {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  upodatedAt DateTime @updatedAt

  title                   String
  coverImage              String
  residence               Int
  beds                    Int
  baths                   Int
  area                    Int
  price                   String
  estMonthlyCommonCharges Int
  description             String?
}


// Protfolio Page
model Protfolio {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  filter FilterPortfolio[]
  title String
  coverImage String
}

model FilterPortfolio {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  upodatedAt DateTime @updatedAt

  title String
  portfolio Protfolio[]
}

// Career Page
model Career {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  title String
  description String?
  time DateTime 
  count Int
  city City[]
}

model City {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  state  State  @relation(fields: [stateId], references: [id])

  city Career[]
  stateId String
  localName String
  name String
  timezone DateTime?
  zipCode Int?
}

model State {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  cites City[]
  localName String
  name String
  timeZone DateTime?
  zipCode Int?
}

// Press Page
model Press {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  coverImg String
  title String
  description String?
}


// Contacts Form
model Contacts {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  name String
  email String @unique
  phone Int
  select String?
  checkbox String?
}

// Team Page
model Team {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  coverImg String
  teamName String
  positionInTheCompany String
  description String?
}

// enum ContactsSelect {
//   Newest
//   Oldest
// }